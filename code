ALGORITHM:
1. m, a binary semaphore which is used to acquire and release the lock.
2. empty, a counting semaphore whose initial value is the number of slots in the buffer, since, initially all slots are empty.
3. full, a counting semaphore whose initial value is 0.
4. Looking at the above code for a producer, we can see that a producer first waits until there is atleast one empty slot.
5. Then it decrements the empty semaphore because, there will now be one less empty slot, since the producer is going to insert data in one of those slots.
6. Then, it acquires lock on the buffer, so that the consumer cannot access the buffer until producer completes its operation.
7. After performing the insert operation, the lock is released and the value of full is incremented because the producer has just filled a slot in the buffer.
8. The consumer waits until there is atleast one full slot in the buffer.
9. Then it decrements the full semaphore because the number of occupied slots will be decreased by one, after the consumer completes its operation.
10. After that, the consumer acquires lock on the buffer.
11. Following that, the consumer completes the removal operation so that the data from one of the full slots is removed.
12. Then, the consumer releases the lock.
13. Finally, the empty semaphore is incremented by 1, because the consumer has just removed data from an occupied slot, thus making it empty.


PROGRAM:


#include<stdio.h>
#include<stdlib.h>
 
int mutex=1,full=0,empty=3,x=0;
 
int main()
{
int n;
void producer();
void consumer();
int wait(int);
int signal(int);
printf("\n1.Producer\n2.Consumer\n3.Exit");
while(1)
{
printf("\nEnter your choice:");
scanf("%d",&n);
switch(n)
{
case 1: if((mutex==1)&&(empty!=0))
producer();
else
printf("Buffer is full!!");
break;
case 2: if((mutex==1)&&(full!=0))
consumer();
else
printf("Buffer is empty!!");
break;
case 3:
exit(0);
break;
}
}
return 0;
}
 
int wait(int s)
{
return (--s);
}
 
int signal(int s)
{
return(++s);
}
 
void producer()
{
mutex=wait(mutex);
full=signal(full);
empty=wait(empty);
x++;
printf("\nProducer produces the item %d",x);
mutex=signal(mutex);
}
 
void consumer()
{
mutex=wait(mutex);
full=wait(full);
empty=signal(empty);
printf("\nConsumer consumes item %d",x);
x--;
mutex=signal(mutex);
}
